#!/bin/bash

# Function to print 5 blank lines
print_blank_lines() {
    for _ in {1..5}; do
        echo ""
    done
}

create_venv() {
    tool_path=$1
    python_version=$2

    # Print blank lines for readability
    print_blank_lines

    # Check if the specified Python version is installed
    if ! command -v $python_version &> /dev/null; then
        echo "Error: $python_version is not installed or not in PATH."
        return 1
    fi

    # Install virtualenv if it's not installed
    if [ "$python_version" == "python2.7" ] && ! command -v virtualenv &> /dev/null; then
        echo "Installing virtualenv for Python 2.7..."
        $python_version -m pip install virtualenv
        if [ $? -ne 0 ]; then
            echo "Error: Failed to install virtualenv for $python_version."
            return 1
        fi
    fi

    # Remove existing venv directory if present
    if [ -d "$tool_path/venv" ]; then
        rm -rf "$tool_path/venv"
    fi

    # Create a virtual environment for the tool
    if [ "$python_version" == "python2.7" ]; then
        $python_version -m virtualenv "$tool_path/venv"

    else
        $python_version -m venv --without-pip "$tool_path/venv"
    fi

    # Check if the virtual environment was created successfully
    if [ ! -f "$tool_path/venv/bin/activate" ]; then
        echo "Error: Failed to create virtual environment for $tool_path with $python_version."
        return 1
    fi

    # Activate the virtual environment
    source "$tool_path/venv/bin/activate"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to activate virtual environment for $tool_path."
        return 1
    fi

    # Install pip if not present and upgrade pip, setuptools, and wheel
    if [ "$python_version" != "python2.7" ]; then
        $tool_path/venv/bin/python -m ensurepip --upgrade
        if [ $? -ne 0 ]; then
            echo "ensurepip failed, trying manual installation of pip..."
            curl https://bootstrap.pypa.io/get-pip.py | $tool_path/venv/bin/python
            if [ $? -ne 0 ]; then
                echo "Error: Failed to manually install pip for $tool_path."
                deactivate
                return 1
            fi
        fi
    fi

    # Upgrade pip, setuptools, and wheel
    $tool_path/venv/bin/pip install --upgrade pip setuptools wheel
    if [ $? -ne 0 ]; then
        echo "Error: Failed to upgrade pip, setuptools, and wheel for $tool_path."
        deactivate
        return 1
    fi

    # Install the requirements for the tool
    if [ "$python_version" != "python2.7" ]; then
        pip install -r "$tool_path/requirements.txt"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to install requirements for $tool_path."
            deactivate
            return 1
        fi
    else # Python 2.7
        $python_version -m pip install -r "$tool_path/requirements.txt"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to install requirements for $tool_path."
            deactivate
            return 1
        fi
    fi

    deactivate

    echo "Success: $(basename $tool_path) venv created with $python_version"
    return 0
}

create_fast_com_files() {
    # for all the directories beginning with Tools/T* create the fast_com_files directory : tool_path/fast_com/command.txt and tool_path/fast_com/status.txt

    tool_dirs=$(find Tools -type d -name "T*" -print)

    for tool_path in $tool_dirs; do
        mkdir -p "$tool_path/fast_com"
        touch "$tool_path/fast_com/command.txt"
        touch "$tool_path/fast_com/status.txt"
    done
}

create_data_live_files() {
    # in data/live create the following files:
    # | [action_selected.txt](action_selected.txt)            | the action selected by the assistant in response to the user's request |
    # | [audio_generated.wav](audio_generated.wav)            | the audio generated by the assistant, this is the vocal answer that will be played by the robot |
    # | [audio_recorded.raw](audio_recorded.raw)              | the audio recorded by the robot, bytes format |
    # | [audio_recorded.wav](audio_recorded.wav)              | the audio recorded by the robot, wav format converted from the raw format |
    # | [documents_context.csv](documents_context.csv)        | the similitude matrix of the documents in the context when the assistant needs to retrieve information from the documents |
    # | [documents_context.txt](documents_context.txt)        | the contexts from the relevant documents when the assistant needs to retrieve information from the documents |
    # | [led_rgb.txt](led_rgb.txt)                            | the color of the led of the robot, in RGB format |
    # | [person_recognized.txt](person_recognized.txt)        | the person recognized by the program, vocal recognition for now |
    # | [text_generated.txt](text_generated.txt)              | the text generated by the assistant |
    # | [text_prompt.txt](text_prompt.txt)                    | the entire text prompt for the LLM to generate its answer |
    # | [text_to_say.txt](text_to_say.txt)                    | the text to say from the generated text, this is the final text that will be said by the robot |
    # | [text_transcribed.txt](text_transcribed.txt)          | the text transcribed from the audio recorded by the robot |
    # | [time_speech_detected.txt](time_speech_detected.txt)  | the last time the program detected speech |

    touch data/live/action_selected.txt
    touch data/live/audio_generated.wav
    touch data/live/audio_recorded.raw
    touch data/live/audio_recorded.wav
    touch data/live/documents_context.csv
    touch data/live/documents_context.txt
    touch data/live/led_rgb.txt
    touch data/live/person_recognized.txt
    touch data/live/text_generated.txt
    touch data/live/text_prompt.txt
    touch data/live/text_to_say.txt
    touch data/live/text_transcribed.txt
    touch data/live/time_speech_detected.txt
}


echo "write NAO IP adress here" > Tools/nao_ip.txt

# Define the tools and their corresponding Python versions
declare -A tools
tools=( ["Tools/T1_PersonRecognition"]="python3.11"
        ["Tools/T2_TextGeneration"]="python3.11"
        ["Tools/T3_TTS"]="python3.10"
        ["Tools/T4_ActionSelection"]="python3.11"
        ["Tools/T8_STT"]="python3.11"
        ["Tools/nao_env"]="python2.7" )

# Loop over the tools array and create virtual environments
for tool in "${!tools[@]}"; do
    create_venv "$tool" "${tools[$tool]}"
done

# Create fast_com_files for each tool
create_fast_com_files
echo "Fast communication files created successfully."

# Create data/live files
create_data_live_files
echo "Data live files created successfully."

echo "Setup completed successfully."